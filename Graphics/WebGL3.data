#version 330 core

in vec3 fColor;
in vec3 fNormal;

out vec4 FragColor;

void main()
{
   if (distance(fNormal, vec3(0.0f,0.0f,0.0f)) < 0.1f) {
      FragColor = vec4(fColor, 1.0f);
   } else {
      FragColor = vec4((normalize(fNormal)+1.0f)/2.0f, 1.0f);
   }
}#version 330 core

layout (location = 0) in vec3 vPos;
layout (location = 1) in vec3 vColor;
layout (location = 2) in vec3 vNormal;
layout (location = 3) in vec3 vTex;

uniform mat4 M;
uniform mat4 VP;

out vec3 fColor;
out vec3 fNormal;

void main()
{
   gl_Position = VP * M * vec4(vPos, 1.0f);
   mat4 normalMatrix = mat4(mat3((transpose(inverse(M)))));
   fColor = vColor;
   fNormal = (normalMatrix * vec4(vNormal, 1.0f)).xyz;

}#version 330 core

in vec3 fColor;
in vec3 fNormal;

out vec4 FragColor;

void main()
{
    FragColor = vec4(fColor, 1.0f);
}#version 330 core

layout (location = 0) in vec3 vPos;
layout (location = 1) in vec3 vColor;
layout (location = 2) in vec3 vNormal;
layout (location = 3) in vec3 vTex;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;


uniform vec3 viewPos;
uniform vec3 color;
uniform float shininess;

uniform vec3 dLightDir;
uniform vec3 dLightAmbient;
uniform vec3 dLightDiffuse;
uniform vec3 dLightSpecular;

uniform vec3 pLightPos;
uniform vec3 pLightAmbient;
uniform vec3 pLightDiffuse;
uniform vec3 pLightSpecular;
uniform float pLightConst;
uniform float pLightLin;
uniform float pLightQuad;

out vec3 fColor;
out vec3 fNormal;

vec3 CalcDirLight()
{
    vec3 normal = vNormal;
    vec3 viewDir = normalize(-viewPos);

    vec4 position = M * vec4(vPos, 1.0f);
    vec3 lightDir = normalize(dLightDir);

    // specular shading
    vec3 reflectDir = reflect(lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);

    // combine results
    vec3 ambient = dLightDiffuse * dLightAmbient * color;
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = dLightDiffuse * diff * color;
    vec3 specular = dLightSpecular * spec * vec3(0.5);
    
    return (ambient + diffuse + specular);
}

vec3 CalcPointLight()
{
    vec3 normal = vNormal;
    vec3 viewDir = normalize(-viewPos);

    vec4 position = M * vec4(vPos, 1.0f);
    vec3 lightDir = normalize(pLightPos - position.xyz);
    // specular shading
    vec3 reflectDir = reflect(lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    // attenuation
    float distance = length(pLightPos - position.xyz);
    float attenuation = 1.0 / (pLightConst + pLightLin * distance + pLightQuad * (distance * distance));    
    // combine results
    vec3 ambient = pLightDiffuse * pLightAmbient * color;
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = pLightDiffuse * diff * color;
    vec3 specular = pLightSpecular * spec * vec3(0.5);

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    
    return (ambient + diffuse + specular);
}

void main()
{
    mat4 normalMatrix = mat4(mat3((transpose(inverse(M)))));
    vec4 normal = (normalMatrix * vec4(vNormal, 1.0f));
    vec4 position = M * vec4(vPos, 1.0f);
    gl_Position = P * V * vec4(position.xyz, 1.0f);
    fColor = CalcPointLight() + CalcDirLight();
}#version 330 core

in vec3 fColor;
in vec3 fNormal;
in vec3 fPos;

uniform vec3 viewPos;
uniform vec3 color;
uniform float shininess;

uniform vec3 dLightDir;
uniform vec3 dLightAmbient;
uniform vec3 dLightDiffuse;
uniform vec3 dLightSpecular;

uniform vec3 pLightPos;
uniform vec3 pLightAmbient;
uniform vec3 pLightDiffuse;
uniform vec3 pLightSpecular;
uniform float pLightConst;
uniform float pLightLin;
uniform float pLightQuad;

out vec4 FragColor;

vec3 CalcDirLight()
{
    vec3 normal = fNormal;
    vec3 viewDir = normalize(-viewPos);

    vec4 position = vec4(fPos, 1.0f);
    vec3 lightDir = normalize(dLightDir);
    // specular shading
    vec3 reflectDir = reflect(lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);

    // combine results
    vec3 ambient = dLightDiffuse * dLightAmbient * color;
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = dLightDiffuse * diff * color;
    vec3 specular = dLightSpecular * spec * vec3(0.5);
    
    return (ambient + diffuse + specular);
}

vec3 CalcPointLight()
{
    vec3 normal = fNormal;
    vec3 viewDir = normalize(-viewPos);

    vec4 position = vec4(fPos, 1.0f);
    vec3 lightDir = normalize(pLightPos - position.xyz);
    // specular shading
    vec3 reflectDir = reflect(lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    // attenuation
    float distance = length(pLightPos - position.xyz);
    float attenuation = 1.0 / (pLightConst + pLightLin * distance + pLightQuad * (distance * distance));    
    // combine results
    vec3 ambient = pLightDiffuse * pLightAmbient * color;
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = pLightDiffuse * diff * color;
    vec3 specular = pLightSpecular * spec * vec3(0.5);

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    
    return (ambient + diffuse + specular);
}

void main()
{
    FragColor = vec4(fColor, 1.0f);
    FragColor = vec4(CalcPointLight() + CalcDirLight(), 1.0f);
}#version 330 core

layout (location = 0) in vec3 vPos;
layout (location = 1) in vec3 vColor;
layout (location = 2) in vec3 vNormal;
layout (location = 3) in vec3 vTex;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;

out vec3 fColor;
out vec3 fNormal;
out vec3 fPos;

void main()
{
   gl_Position = P * V * M * vec4(vPos, 1.0f);
   mat4 normalMatrix = mat4(mat3((transpose(inverse(M)))));
   fColor = vColor;
   fNormal = (normalMatrix * vec4(vNormal, 1.0f)).xyz;
   fPos = (M * vec4(vPos, 1.0f)).xyz;
}